----------------------------------------------------------
2.1 Incorporation of a fixed-point combinator
----------------------------------------------------------
letrec sum: Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m ) in sum
            Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ ((((fix (lambda sum:(Nat) -> ((Nat) -> (Nat)). (lambda n:Nat. (lambda m:Nat. if (iszero (n)) then (m) else (succ (((sum pred (n)) m))))))) pred (n)) m))

letrec suma: Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n
    then m else succ (suma (pred n)m) in 
        letrec prod: Nat -> Nat -> Nat =
            lambda m: Nat. lambda n: Nat. if iszero m then 0
                else suma n (prod (pred m)n) in prod 6 5;;

letrec suma: Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n
    then m else succ (suma (pred n)m) in 
        letrec prod: Nat -> Nat -> Nat =
            lambda m: Nat. lambda n: Nat. if iszero m then 0
                else suma n (prod (pred m)n) in 
                    letrec fact: Nat -> Nat =
                        lambda n : Nat. if iszero n then succ 0
                            else prod n (fact (pred n)) in fact 5;;

letrec suma: Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n
    then m else succ (suma (pred n)m) in 
letrec fib: Nat -> Nat =
    lambda n: Nat. if iszero n then 0 else
        if iszero (pred n) then 1 else
            suma (fib(pred n)) (fib(pred (pred n)))
                in fib 6;;
-------------------------------------------------------------
2.2 Incorporation of a global context
-------------------------------------------------------------

N = Nat;;
x = 8;;
id = lambda y : N. x;;

(*It can be better tested with the following examples.*)

-------------------------------------------------------------
2.3 Incorporation of type string and related operations
-------------------------------------------------------------
y = "Hello world";;

let x = y in x;;

concat "Hello " "world";;
concat ((lambda s : String. s) "holaa") "de";;

capitalize (concat y (concat " hell.o " "world"));;



-------------------------------------------------------------
2.4 Incorporation of tuples
-------------------------------------------------------------
{1,"hello", if true then false else true};;

{1, 2}.1;;

let x = {"Hello ", "world"} in concat (x.0) (x.1);;

-------------------------------------------------------------
2.5 Incorporation of records
-------------------------------------------------------------
{srt="hola", num=1, fun=let x = "mundo" in x};;

{srt="hola", num=1, fun=let x = "mundo" in x}.num;;

let a = {srt="hola", num=1, fun=let x = "mundo" in x} in concat (a.srt) (a.fun);;

-------------------------------------------------------------
2.8 Incorporation of variants
-------------------------------------------------------------
Int = <pos:Nat, zero:Bool, neg:Nat>;;
p3 = <pos=3> as Int;;
z0 = <zero=true> as Int;;
n5 = <neg=5> as Int;;
-------------------------------------------------------------
2.8 Incorporation of lists
-------------------------------------------------------------
l1 = (cons[Nat] 8 (cons[Nat] 5 (cons[Nat] 7 nil[Nat])));;
l2 = (cons[Nat] 8 (cons[Nat] 5 nil[Nat]));;
l3 = (cons[Nat] 3 nil[Nat]);;

f = L i:Nat. succ i;;

length = letrec length : List[Nat] -> Nat = lambda l : List[Nat]. if isnil[Nat] l then 0 else (letrec sum : Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in sum 1 (length (tail[Nat] l))) in length;;

(*Reverses elements of a List[Nat]*)
rev = letrec rev : List[Nat] -> List[Nat] -> List[Nat] = 
        lambda aux : List[Nat].
            lambda l1 : List[Nat].
                if (isnil[Nat] (tail[Nat] l1)) then (cons[Nat] (head[Nat] l1) aux) else (rev (cons[Nat] (head[Nat] l1) aux) (tail[Nat] l1)) in rev nil[Nat];;

(*Appends two List[Nat]*)
append = letrec append : List[Nat] -> List[Nat] -> List[Nat] = 
    lambda l1 :  List[Nat]. 
        lambda l2 : List[Nat]. 
            if (isnil[Nat] l1) then l2 
            else (cons[Nat] (head[Nat] l1) (append (tail[Nat] l1) l2)) in append;;

(*Maps a function (Nat -> Nat) into to the elements of a List[Nat]*)
map = letrec map : (Nat -> Nat) -> List[Nat] -> List[Nat] = 
    lambda f : Nat -> Nat.
        lambda l : List[Nat].
            if (isnil[Nat] l) then nil[Nat]
            else append (cons[Nat] (f (head[Nat] l)) nil[Nat]) (map (f) (tail[Nat] l)) in map;;

(*Some expressions to test error handling and outputs*)
x = (cons[Nat] 3 nil[Nat]);;
y = nil[Nat];;
isnil[Nat] x;;
isnil[Nat] (cons[Nat] 3 nil[Nat]);;
isnil[Nat] nil[Nat];;
isnil[Nat] y;;
isnil[Nat] 9;;
isnil[Bool] x;;
isnil[Bool] (cons[Nat] 3 nil[Nat]);;
isnil[Bool] nil[Nat];;
isnil[Bool] y;;
isnil[Bool] 9;;
isnil[Bool] (cons[Bool] true nil[Bool]);;

l = (cons[Nat] 8 (cons[Nat] 5 (cons[Nat] 7 nil[Nat])));;
sum = letrec sum : Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in sum;;
prod = letrec prod : Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero m then 0 else sum n (prod n (pred m)) in prod;;
length = letrec length : List[Nat] -> Nat = lambda l : List[Nat]. if isnil[Nat] l then 0 else sum 1 (length (tail[Nat] l)) in length;;

N3 = Nat -> Nat -> Nat;;
cons[N3] sum nil[N3];;
cons[N3] prod (cons[N3] sum nil[N3]);;
(head[N3] (cons[N3] prod (cons[N3] sum nil[N3]))) 12 5;;
-------------------------------------------------------------
2.9 Subtyping

let f = lambda r:{x:Nat}. r.x in f {x=3,y=4};;
-------------------------------------------------------------

More examples to try:

(*Product function. Checks let in and global context working together *)
f = let g = 3 in let h = 1 in letrec sum: Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m ) in sum;;

(*Checks more examples for records*)
f = (lambda y : N. y);;
x = 2;;
y = "str";;
x2 = true;;
y2 = true;;
z2 = false;;
f = let x = {epa=3,hello=x,bye=y,world=if x2 then y2 else z2} in x.bye;;

(*This should give an error*)
let g = 3 in N;; 

(*Checks different combinations of global context*)
N = Nat;;
y = 3;;
lambda x: Nat. x;;
lambda x: N. x;;
lambda x: Nat. y;;
x = lambda x: N. y;;
f = lambda x: Nat. x;;
f = lambda x: N. x;; 
f = lambda x: Nat. y;;
f = lambda x: N. y;;
